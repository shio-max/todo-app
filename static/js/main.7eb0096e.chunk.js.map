{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","alert","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7eb0096e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = ({ inputText, setInputText, todos, setTodos, setStatus }) => {\n  const inputTextHandler = (e) => {\n    setInputText(e.target.value);\n  };\n  const submitHandler = (e) => {\n    //現在のURLにForm内容が送信され、結果的にページのリロードが起きるデフォルトの動作キャンセル\n    e.preventDefault();\n    if (inputText === \"\") return alert(\"Your textarea is empty!\");\n    setTodos([\n      ...todos,\n      { text: inputText, completed: false, id: Math.random() * 1000 },\n    ]);\n    //submit後、input欄をリセット\n    setInputText(\"\");\n  };\n  const statusHandler = (e) => {\n    setStatus(e.target.value);\n  };\n  return (\n    <form>\n      <input\n        value={inputText}\n        onChange={inputTextHandler}\n        type=\"text\"\n        className=\"todo-input\"\n      />\n      <button onClick={submitHandler} className=\"todo-button\" type=\"submit\">\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n      <div className=\"select\">\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\n\nconst Todo = ({ text, todo, todos, setTodos }) => {\n  //Events\n  const deleteHandler = () => {\n    //filter()メゾットは、引数として与えられたテスト関数を各配列要素に対して実行し、それに合格したすべての配列要素からなる新しい配列を生成\n    setTodos(todos.filter((el) => el.id !== todo.id));\n  };\n  const completeHandler = () => {\n    //map() メソッドは、与えられた関数を配列のすべての要素に対して呼び出し、その結果からなる新しい配列を生成\n    setTodos(\n      todos.map((item) => {\n        if (item.id === todo.id) {\n          return {\n            ...item,\n            completed: !item.completed,\n          };\n        }\n        return item;\n      })\n    );\n  };\n\n  return (\n    <div className=\"todo\">\n      <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\n        {text}\n      </li>\n      <button onClick={completeHandler} className=\"complete-btn\">\n        <i className=\"fas fa-check\"></i>\n      </button>\n      <button onClick={deleteHandler} className=\"trash-btn\">\n        <i className=\"fas fa-trash\"></i>\n      </button>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport Todo from \"./Todo\";\n\nconst TodoList = ({ todos, setTodos, filteredTodos}) => {\n  return (\n    <div className=\"todo-container\">\n      <ul className=\"todo-list\">\n        {filteredTodos.map((todo) => (\n          <Todo \n            key={todo.id} \n            text={todo.text}\n            setTodos={setTodos}\n            todos={todos}\n            todo={todo}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  //Status\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  //Effects\n  //Run once whrn the app start 第二引数に[]\n  useEffect (() => {\n    getLocalTodos();\n  },[]);\n\n  useEffect(() => {\n      //第一引数\n      filterHandler();\n      saveLocalTodos();\n    },\n    //第２引数(todos,statusのデータが更新されるたびに、上の関数が呼び出される)\n    [todos, status]\n  );\n\n  //Functions\n  const filterHandler = () => {\n    switch (status) {\n      case \"completed\":\n        setFilteredTodos(todos.filter((todo) => todo.completed === true));\n        break;\n      case \"uncompleted\":\n        setFilteredTodos(todos.filter((todo) => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n  //Save to LocalStrage\n  const saveLocalTodos = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n  //Get from LocalStrage\n  const getLocalTodos = () => {\n    if (localStorage.getItem(\"todos\") === null) {\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Todo List</h1>\n      </header>\n      <Form\n        todos={todos}\n        setTodos={setTodos}\n        inputText={inputText}\n        setInputText={setInputText}\n        setStatus={setStatus}\n      />\n      <TodoList\n        todos={todos}\n        setTodos={setTodos}\n        filteredTodos={filteredTodos}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}